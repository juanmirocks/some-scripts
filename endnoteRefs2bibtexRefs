#!/usr/bin/env python3
import sys
import re

assert sys.version_info.major == 3, "the script requires Python 3"


__author__ = "Juan Miguel Cejuela (@juanmirocks)"


__help__ = """
            Transform inline a text converting unformatted endnote references/citations to bibtex-latex citations, as in:

            Input:
            blah blah... {Van Auken, 2012 #1;Gramates 2017 #82;Cejuela, 2017 #277} blah blah {Vaynerchuk 2016; #4}

            Output:

            blah blah... \cite{RN1,RN82,RN277} blah blah


            The script also works if the input contains squarly brackets ({, }) and the # symbol (#) escaped, e.g. \{Pio 2045 \#0\}.


            Script arguments:

            1. file to convert
            2. (optionally; starts in first line) only start processing after the given line
            3. (optionally; default "RN") prefix to use in the latex citations.
                For context, "RN" is the the typical prefix generated by EndNote when exporting citations to BibTex.

            Script output:

            Converted text to standard outputt


            KNOWN LIMITATION: you should previously merge the relevant lines, as multiline citations are currently not detected, e.g.:

            blah blah \{Cejuela, 2017
            \#277\}.


            Go ahead, you can run the script on this script :-)
           """


REGEX_OUTER = re.compile("(.*?)(\\\?{[^{}]*?#[^{}]*}\\\?)(.*)", re.DOTALL)
REGEX_INNER = re.compile("#([0-9]+)")

# ----------------------------------------------------------------------------

if __name__ == "__main__":
    try:
        input_file = sys.argv[1]
        start_at_line = 1 if len(sys.argv) <= 2 else int(sys.argv[2])
        prefix = "RN" if len(sys.argv) <= 3 else sys.argv[3]

        with open(input_file) as f:
            for line_num, line in enumerate(f, 1):
                if line_num < start_at_line:
                    sys.stdout.write(line)

                else:
                    rest_of_line = line
                    while len(rest_of_line) > 0:
                        match = re.search(REGEX_OUTER, rest_of_line)
                        if match:
                            sys.stdout.write(match.group(1))
                            citation_labels = [prefix + num for num in re.findall(REGEX_INNER, match.group(2))]
                            sys.stdout.write("\cite{" + ",".join(citation_labels) + "}")
                            rest_of_line = match.group(3)
                        else:
                            sys.stdout.write(rest_of_line)
                            rest_of_line = ""

        sys.stdout.flush()

    except Exception:
        print(__help__)
        print()
        raise
