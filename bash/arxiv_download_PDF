#!/usr/bin/env bash
#last tested with: bash 5.2.x

# Copyright 2023 Dr. Juan Miguel Cejuela


#
# Download arXiv PDF article with a sensible filename format:
# `PUBLICATION_ISO_DATE (UPDATED_ISO_DATE vX) - AUTHORS_SHORTENED - TITLE - IDENTIFIER.pdf`
#
# Additionally, if `exiftool` is installed, this script also adds sensible metadata to the downloaded PDF.
#
# Note:
# `(UPDATED_ISO_DATE vX)`` is optional and only written if the article was updated; `vX` is the latest update version number (if any, i.e., `X` >= 2).#
#
# Arguments:
# 1: article's URL or identifier
# 2: (OPTIONAL) folder to save the PDF into (it defaults to the current directory).
#
arxiv_download_PDF() {
  article="$1"
  save_to="${2-"."}"

  # Check if input is a URL or an identifier
  if [[ "$article" =~ ^https?://arxiv.org/abs/(.+)$ ]]; then
    identifier="${BASH_REMATCH[1]}"
  elif [[ -z "$article" ]]; then
    echo >&2 "Error: Empty arXiv URL or identifier"
    exit 1
  else
    identifier="$article"
  fi

  # Get the metadata for the article
  metadata=$(curl -sLH "Accept: application/json" "http://export.arxiv.org/api/query?id_list=$identifier")

  # Check if the API returned an error
  if [[ $metadata == *"<title>Error</title>"* ]]; then
    echo >&2 "Error: Invalid arXiv URL or identifier: ${identifier}"
    exit 1
  fi

  # Extract the relevant information from the metadata using xpath (requires xmllint)
  original_time=$(echo "$metadata" | xmllint --xpath '//*[local-name()="entry"]/*[local-name()="published"]/text()' -)
  latest_time=$(echo "$metadata" | xmllint --xpath '//*[local-name()="entry"]/*[local-name()="updated"]/text()' -)
  title=$(echo "$metadata" | xmllint --xpath '//*[local-name()="entry"]/*[local-name()="title"]/text()' -)
  authors=$(echo "$metadata" | xmllint --xpath '//*[local-name()="entry"]//*[local-name()="author"]/*[local-name()="name"]/text()' -)
  authors_surnames=$(echo "$authors" | awk '{print $NF}' | paste -sd "," -)
  authors_shortened="${authors_surnames}"
  latest_version=$(echo "$metadata" | xmllint --xpath '//*[local-name()="entry"]/*[local-name()="id"]/text()' - | grep -oE 'v[0-9]+')

  # Format the dates by extracting the first 10 characters (date in ISO format)
  original_date=${original_time:0:10}
  latest_date=${latest_time:0:10}

  # Shorten the authors names according to the rules
  IFS=',' read -ra authors_array <<<"$authors_surnames"
  if [ "${#authors_array[@]}" -ge 4 ]; then
    authors_shortened="${authors_array[0]} et al"
  fi

  # Construct the filename according to the format
  filename="$original_date"
  if [ "$latest_version" != "v1" ]; then
    filename+=" ($latest_date $latest_version)"
  fi
  filename+=" - $authors_shortened - $(_escape_str_for_filename "$title") - $identifier.pdf"

  out_filepath="$save_to/$filename"

  # Download the PDF
  curl -sS "https://arxiv.org/pdf/$identifier.pdf" --output "$out_filepath"

  # Write metadata if `exiftool` is installed
  if command -v exiftool >/dev/null; then
    exiftool -q -overwrite_original_in_place -Title="$title" -Author="$authors" -Subject="https://arxiv.org/abs/$identifier" -CreateDate="$original_time" -ModifyDate="$latest_time" "$out_filepath"
  fi

  echo "Downloaded PDF as: $out_filepath"
}


_escape_str_for_filename() {
  _x="$1"
  _x="${_x//\// }"
  _x="${_x//:/;}"
  # NOTE: we echo without double quotes. In this way, bash collapses contiguous whitespaces
  echo $_x
}


if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  arxiv_download_PDF "$@"
fi
